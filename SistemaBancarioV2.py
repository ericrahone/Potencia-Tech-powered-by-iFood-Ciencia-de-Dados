# -*- coding: utf-8 -*-
"""SistemaBancarioV2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18e13Q5Zaj2M1cciL4zUkE47VdN3tQjet
"""

class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

    def __str__(self):
        return f"Nome: {self.nome}, Data de Nascimento: {self.data_nascimento}, CPF: {self.cpf}, Endereço: {self.endereco}"

class ContaBancaria:
    def __init__(self, agencia, numero_conta, usuario):
        self.agencia = agencia
        self.numero_conta = numero_conta
        self.usuario = usuario
        self.saldo = 0.0
        self.transacoes = []
        self.saques_realizados = 0

    def deposito(self, valor):
        if valor > 0:
            self.saldo += valor
            self.transacoes.append(f'Depósito: +R${valor:.2f}')
            return f'Depósito de R${valor:.2f} realizado com sucesso.'
        else:
            return 'O valor do depósito deve ser maior que zero.'

    def saque(self, valor, max_saque=500, max_saques_diarios=3):
        if valor <= 0:
            return 'O valor do saque deve ser maior que zero.'
        if valor > self.saldo:
            return 'Saldo insuficiente para realizar o saque.'
        if self.saques_realizados >= max_saques_diarios:
            return 'Limite de saques diários atingido.'
        if valor > max_saque:
            return 'O valor máximo de saque é R$500.'

        self.saldo -= valor
        self.transacoes.append(f'Saque: -R${valor:.2f}')
        self.saques_realizados += 1
        return f'Saque de R${valor:.2f} realizado com sucesso.'

    def extrato(self, *args, saldo=False):
        extrato = f'\nSaldo atual: R${self.saldo:.2f}\n'
        if saldo:
            extrato += "Histórico de Transações:\n"
            for i, transacao in enumerate(self.transacoes, start=1):
                extrato += f"{i}: {transacao}\n"
        return extrato

def cadastrar_usuario(usuarios):
    nome = input("Digite o nome do cliente: ")
    data_nascimento = input("Digite a data de nascimento (DD/MM/AAAA): ")
    cpf = input("Digite o CPF do cliente (apenas números): ")

    # Verificar se o CPF já existe na lista de usuários
    cpf_existente = [usuario for usuario in usuarios if usuario.cpf == cpf]
    if cpf_existente:
        print("CPF já cadastrado. Não é permitido cadastrar dois usuários com o mesmo CPF.")
        return None
    else:
        endereco = input("Digite o endereço (logradouro, nro da casa - bairro - cidade/sigla estado): ")
        usuario = Usuario(nome, data_nascimento, cpf, endereco)
        usuarios.append(usuario)
        return usuario

def listar_usuarios(usuarios):
    if not usuarios:
        print("Nenhum usuário cadastrado.")
    else:
        print("\nLista de Usuários:")
        for i, usuario in enumerate(usuarios, start=1):
            print(f"{i}: {usuario}")

def excluir_usuario(usuarios, contas):
    if not usuarios:
        print('Nenhum usuário cadastrado para excluir.')
        return

    listar_usuarios(usuarios)
    escolha = int(input("\nDigite o número do usuário que deseja excluir: "))

    if escolha >= 1 and escolha <= len(usuarios):
        usuario = usuarios[escolha - 1]

        # Verificar se o usuário está vinculado a alguma conta
        usuario_vinculado = any(conta.usuario == usuario for conta in contas)
        if usuario_vinculado:
            print('Não é possível excluir um usuário vinculado a uma conta.')
        else:
            usuarios.pop(escolha - 1)
            print(f'Usuário {usuario.nome} excluído com sucesso.')
    else:
        print("Escolha inválida. Tente novamente.")

def cadastrar_conta(agencia, usuarios, proximo_numero_conta):
    if usuarios:
        listar_usuarios(usuarios)
        escolha = int(input("\nDigite o número do usuário para o qual deseja cadastrar a conta: "))
        if escolha >= 1 and escolha <= len(usuarios):
            conta = ContaBancaria(agencia, proximo_numero_conta, usuarios[escolha - 1])
            proximo_numero_conta += 1
            return conta, proximo_numero_conta
        else:
            print("Escolha inválida. Tente novamente.")
    else:
        print('É necessário cadastrar um usuário primeiro.')
    return None, proximo_numero_conta

def listar_contas(contas):
    if not contas:
        print("Nenhuma conta bancária cadastrada.")
    else:
        print("\nLista de Contas Bancárias:")
        for i, conta in enumerate(contas, start=1):
            print(f"{i}: Agência: {conta.agencia}, Conta: {conta.numero_conta}, Cliente: {conta.usuario.nome}, Saldo: R${conta.saldo:.2f}")

def excluir_conta(contas):
    if not contas:
        print('Nenhuma conta bancária cadastrada para excluir.')
        return
    listar_contas(contas)
    escolha = int(input("\nDigite o número da conta que deseja excluir: "))

    if escolha >= 1 and escolha <= len(contas):
        conta = contas[escolha - 1]

        # Verificar se a conta está vazia (com saldo igual a zero)
        if conta.saldo == 0:
            contas.pop(escolha - 1)
            print(f'Conta {conta.numero_conta} excluída com sucesso.')
        else:
            print('Não é possível excluir uma conta com saldo diferente de zero.')
    else:
        print("Escolha inválida. Tente novamente.")

def vincular_conta_a_usuario(usuarios, contas):
    if not usuarios:
        print('É necessário cadastrar um usuário primeiro.')
        return
    if not contas:
        print('É necessário criar uma conta bancária primeiro.')
        return

    listar_usuarios(usuarios)
    escolha_usuario = int(input("\nDigite o número do usuário ao qual deseja vincular uma conta: "))
    listar_contas(contas)
    escolha_conta = int(input("\nDigite o número da conta que deseja vincular ao usuário: "))

    if escolha_usuario >= 1 and escolha_usuario <= len(usuarios) and escolha_conta >= 1 and escolha_conta <= len(contas):
        usuario = usuarios[escolha_usuario - 1]
        conta = contas[escolha_conta - 1]
        conta.usuario = usuario
        print(f'Conta {conta.numero_conta} vinculada ao usuário {usuario.nome}.')
    else:
        print("Escolha inválida. Tente novamente.")

def main():
    usuarios = []  # Lista para armazenar os usuários cadastrados
    contas = []  # Lista para armazenar as contas bancárias cadastradas
    proximo_numero_conta = 1  # Número da conta sequencial iniciando em 1
    agencia = "0001"  # Número da agência fixo

    while True:
        print("\nBem-vindo ao Banco Pytloun")
        print("Escolha uma opção:")
        print("1: Cadastrar Usuário")
        print("2: Cadastrar Conta Bancária")
        print("3: Vincular Conta a Usuário")
        print("4: Depósito")
        print("5: Saque")
        print("6: Extrato")
        print("7: Listar Usuários")
        print("8: Listar Contas")
        print("9: Excluir Usuário")
        print("10: Excluir Conta")
        print("11: Sair")

        opcao = input("Digite o número da opção desejada: ")

        if opcao == '1':
            usuario = cadastrar_usuario(usuarios)
            if usuario:
                print(f'Usuário {usuario.nome} cadastrado com sucesso.')
        elif opcao == '2':
            conta, proximo_numero_conta = cadastrar_conta(agencia, usuarios, proximo_numero_conta)
            if conta:
                contas.append(conta)
                print(f'Conta {conta.numero_conta} cadastrada com sucesso.')
        elif opcao == '3':
            vincular_conta_a_usuario(usuarios, contas)
        elif opcao == '4':
            if contas:
                listar_contas(contas)
                escolha = int(input("\nDigite o número da conta na qual deseja fazer o depósito: "))
                if escolha >= 1 and escolha <= len(contas):
                    valor = float(input("Digite o valor do depósito: "))
                    resultado = contas[escolha - 1].deposito(valor)
                    print(resultado)
                else:
                    print("Escolha inválida. Tente novamente.")
            else:
                print('É necessário criar uma conta bancária primeiro.')
        elif opcao == '5':
            if contas:
                listar_contas(contas)
                escolha = int(input("\nDigite o número da conta na qual deseja fazer o saque: "))
                if escolha >= 1 and escolha <= len(contas):
                    valor = float(input("Digite o valor do saque: "))
                    resultado = contas[escolha - 1].saque(valor)
                    print(resultado)
                else:
                    print("Escolha inválida. Tente novamente.")
            else:
                print('É necessário criar uma conta bancária primeiro.')
        elif opcao == '6':
            if contas:
                listar_contas(contas)
                escolha = int(input("\nDigite o número da conta da qual deseja ver o extrato: "))
                if escolha >= 1 and escolha <= len(contas):
                    saldo = input("Deseja incluir o histórico de transações? (S/N): ")
                    resultado = contas[escolha - 1].extrato(saldo=saldo.lower() == 's')
                    print(resultado)
                else:
                    print("Escolha inválida. Tente novamente.")
            else:
                print('É necessário criar uma conta bancária primeiro.')
        elif opcao == '7':
            listar_usuarios(usuarios)
        elif opcao == '8':
            listar_contas(contas)
        elif opcao == '9':
            excluir_usuario(usuarios, contas)
        elif opcao == '10':
            excluir_conta(contas)
        elif opcao == '11':
            print("\nObrigado por utilizar os nossos serviços!")
            break
        else:
            print("\nOpção inválida. Tente novamente.")

if __name__ == "__main__":
    main()